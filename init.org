#+TITLE: Emacs configuration file
#+AUTHOR: Pierce Wang
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :results silent
#+STARTUP: content indent
* Credits
Inspired by [[https://github.com/freetonik/emacs-dotfiles][freetonik]]'s setup. Check out his podcast!
* Installing
This config works best with brew's emacs (26.1)
#+begin_src sh :tangle no
  brew cask install emacs
#+end_src

** Dependencies
#+begin_src sh :tangle no
  brew install ispell
  brew cask install mactex
#+end_src

** Meta
When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

** Headers
Lexical scoping for the init-file is needed, it can be specified in the header. This is the first line of the actual configuration:

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+END_SRC

Tangle and compile this file on save automatically:

#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

This helps get rid of =functions might not be defined at runtime= warnings. See https://github.com/jwiegley/use-package/issues/590

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (defvar use-package-expand-minimally byte-compile-current-file))
#+END_SRC

* Startup
** Garbage Collection
For faster startup times, according to [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][hlissner]],

#+begin_quote
The GC eats up quite a bit of time, easily doubling startup time. The trick is to turn up the memory threshold as early as possible.
#+end_quote

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)

  (defvar better-gc-cons-threshold 16777216 ; 16mb
    "The default value to use for `gc-cons-threshold'.
  If you experience freezing, decrease this. If you experience stuttering, increase this.")


  (add-hook 'emacs-startup-hook
    (lambda ()
      (setq gc-cons-threshold better-gc-cons-threshold
            gc-cons-percentage 0.1))) ; Default value for `gc-cons-percentage'
#+end_src

gc and minibuffer (also from doom)
#+begin_src emacs-lisp
  (defun pgw/defer-garbage-collection-h ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun pgw/restore-garbage-collection-h ()
    "Defer it so that commands launched immediately after will enjoy the benefits."
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold better-gc-cons-threshold))))

  (add-hook 'minibuffer-setup-hook #'pgw/defer-garbage-collection-h)
  (add-hook 'minibuffer-exit-hook #'pgw/restore-garbage-collection-h)
#+end_src

** Package Setup
Initialize package and add Melpa, GNU, and Org sources.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
      '(("melpa-stable" . "https://stable.melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ))
  (package-initialize)
#+end_src

** Use package
Add custom load path:

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/custom_load/")
#+end_src

Install use-package.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile (require 'use-package))

  (setq use-package-always-ensure t)
#+END_SRC

use-package.el no longer needed at runtime
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)                ;; if you use any :bind variant
#+end_src

* Configurations
** Emacs Stuff
*** Startup Time Test

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

*** Custom Set Variables
Store custom-file separately, don't freek out when it's not found.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'noerror)
#+end_src

*** Confirm Kill Emacs
Make Emacs confirm when quitting:
#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'yes-or-no-p)
#+end_src
** Custom Functions
*** append-to-list
#+begin_src emacs-lisp
  (defun append-to-list (list-var elements)
    "Append ELEMENTS to the end of LIST-VAR.

  The return value is the new value of LIST-VAR."
    (unless (consp elements)
      (error "ELEMENTS must be a list"))
    (let ((list (symbol-value list-var)))
      (if list
          (setcdr (last list) elements)
        (set list-var elements)))
    (symbol-value list-var))
#+end_src

*** Increment/Decrement Numbers
#+begin_src emacs-lisp
  ;;; Increment Numbers
  (defun increment-number-at-point ()
    "Increments numbers at cursor"
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

  ;;; Decrement Numbers
  (defun decrement-number-at-point ()
    "Decrements numbers at cursor"
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

  ;;; Binding
  (global-set-key (kbd "C-; C-=") 'increment-number-at-point)
  (global-set-key (kbd "C-; C--") 'decrement-number-at-point)
#+end_src

*** Insert Directory (obsolete?)
#+begin_src emacs-lisp
  (defun insertdirectory ()
    "Insert current directory for macro use"
    (interactive)
    (insert default-directory))
#+end_src

*** Ignore Error Wrapping Function
For some functions that I don't need to give errors:
#+begin_src emacs-lisp
  (defun ignore-error-wrapper (fn)
    "Funtion return new function that ignore errors.
       The function wraps a function with `ignore-errors' macro."
    (lexical-let ((fn fn))
      (lambda ()
        (interactive)
        (ignore-errors
          (funcall fn)))))
#+end_src

*** Insert Org-mode Image
#+begin_src emacs-lisp
  (defun insert-org-image (&optional swindow)
    "Prompt user for name of file, append time and date string, then use the Mac OSX `screencapture` feature to take a photo and place it in the relative ./figures directory."
    (interactive "P")
    (unless (not (eq system-type 'darwin))
      (let* ((outdir (concat (file-name-directory (buffer-file-name)) "/figures"))
             (namefile (concat (read-string "Enter File Name: ") "_" (format-time-string "%Y%m%d_%H%M%S.jpeg"))))
        (if (char-equal (aref namefile 0) ?_)
            (setq namefile (substring namefile 1 (length namefile))))
        (let* ((outfile (expand-file-name namefile outdir)))
          (unless (file-directory-p outdir)
            (make-directory outdir t))
          (message "Argument: %s" swindow)
          (if swindow
              (call-process "screencapture" nil nil nil "-w" outfile)
            (call-process "screencapture" nil nil nil "-i" outfile))
          (message namefile)
          (insert (concat (concat "[[file:./figures/" (file-name-nondirectory outfile)) "]]"))))
      )
    )
#+end_src

*** Keyboard Coding System
#+begin_src emacs-lisp
  (set-keyboard-coding-system nil)
#+end_src

*** Dired Open File
#+begin_src emacs-lisp
  (defun pgw/dired-open-file ()
    "In dired, open the file named on this line using the default application in the system."
    (interactive)
    (let ((file (dired-get-filename nil t)) ; Full path
          (filename (dired-get-filename t t))) ; File name for display
      (message "Opening %s..." filename)
      (call-process "open" nil 0 nil file)
      (message "Opening %s done" filename)))
#+end_src

*** Copy MLA org-file
#+begin_src emacs-lisp
  (defun pgw/copy-mla-file ()
    "Copy MLA_OrgFile.org to current directory for use in school essays."
    (interactive)
    (copy-file "~/Dropbox/org/templates/school/MLA_OrgFile.org" default-directory)
    )
#+end_src

*** Lookup in Dictionary (Apple)
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (defun pgw/lookup-dictionary ()
      "Function to open a dictionary searching the highlighted word
  No spaces are allowed in the input of this function"
      (interactive)
      (let ((word (read-from-minibuffer "Word query: ")))
        (call-process "open" nil nil nil (concat "dict://" word)))
      )
    (global-set-key (kbd "M-#") 'pgw/lookup-dictionary)
    )
#+end_src

** Modifier Keys
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (with-no-warnings
      (setq mac-option-modifier 'meta)
      (setq mac-control-modifier 'control)
      (setq ns-function-modifier 'hyper)))

  (when (eq system-type 'gnu/linux)
    (with-no-warnings (setq x-super-keysym 'hyper)))
#+end_src

** OS Integration
#+begin_src emacs-lisp
  (use-package exec-path-from-shell)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

  ;;; Change shell process (from bash to zsh)
  (setq shell-file-name "/bin/zsh")
#+end_src

** Visuals

#+begin_src emacs-lisp
  ;(load-theme 'tango-dark t)
  ;;; Frame
  (add-to-list 'default-frame-alist '(height . 46))
  (add-to-list 'default-frame-alist '(width . 146))

  ;;; Visual line mode (for text wrapping)
  (global-set-key (kbd "C-x v v") 'visual-line-mode)

  ;(global-visual-line-mode t)
  (global-linum-mode 0)
  (global-display-line-numbers-mode 1)
  (setq-default display-line-numbers 'visual)
  (setq display-line-numbers-type 'visual)
  (set-default 'truncate-lines t)

  ;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; assuming you are using a dark theme
  ;; (setq ns-use-proxy-icon nil)
  ;; (setq frame-title-format nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq visual-line-fringe-indicators '(left-curly-arrow hollow-square)) ;; '(left-curly-arrow right-curly-arrow) for both left and right
  ;; Testing freetonik's fringe indicator alist
  (setq-default fringe-indicator-alist '((truncation left-arrow right-arrow)
   (continuation nil right-arrow)
   (overlay-arrow . right-triangle)
   (up . up-arrow)
   (down . down-arrow)
   (top top-left-angle top-right-angle)
   (bottom bottom-left-angle bottom-right-angle top-right-angle top-left-angle)
   (top-bottom left-bracket right-bracket top-right-angle top-left-angle)
   (empty-line . empty-line)
   (unknown . question-mark)))

#+end_src

*** All the Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

*** Doom Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    ;; (load-theme 'doom-solarized-light t)
    (load-theme 'doom-molokai t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;; (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )
#+end_src

**** CANCELLED Set Orgmode Agenda Stuff
CLOSED: [2020-01-13 Mon 17:16]
#+begin_src emacs-lisp :tangle no
  ;; this must be used after loading the theme with (load-theme THEME-NAME t)
  (custom-set-faces
   `(org-time-grid ((t (:foreground ,(doom-blend 'yellow 'fg 0.6)))))
   `(org-time-grid ((t (:foreground ,(doom-blend 'yellow 'fg 0.6)))))
   `(org-habit-ready-face ((t (:foreground ,(doom-blend 'blue 'fg 0.1)))))
   `(org-habit-alert-face ((t (:foreground ,(doom-blend 'yellow 'fg 0.1)))))
   `(org-habit-overdue-face ((t (:foreground ,(doom-blend 'red 'fg 0.1)))))
   )
#+end_src

*** Frame Resize Pixelwise
Make Emacs play nice with my window manager and resizing around other windows.
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

** Windows and Frames
*** Movement Between Windows
Windows and Frames are different than one would now intuitively think. Windows exist inside subdivided frames which we call windows now. The following code makes windows and frames easier to navigate:

#+begin_src emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (global-set-key (kbd "H-h") (ignore-error-wrapper 'windmove-left))
    (global-set-key (kbd "H-l") (ignore-error-wrapper 'windmove-right))
    (global-set-key (kbd "H-k") (ignore-error-wrapper 'windmove-up))
    (global-set-key (kbd "H-j") (ignore-error-wrapper 'windmove-down))
    )

  ;; Disabled, Doesn't really work for me - going to use s-left and s-right instead
  ;; (use-package framemove
  ;;   :load-path "custom_load"
  ;;   :config
  ;;   (require 'framemove)
  ;;   (global-set-key (kbd "C-e-<down>")  'fm-down-frame)
  ;;   (global-set-key (kbd "C-s-<up>")    'fm-up-frame)
  ;;   (global-set-key (kbd "C-s-<left>")  'fm-left-frame)
  ;;   (global-set-key (kbd "C-s-<right>") 'fm-right-frame)
  ;;   (setq framemove-hook-into-windmove t)
  ;;   )
#+end_src

*** Window Management
#+begin_src emacs-lisp
  (use-package rotate
    :load-path "site-lisp/emacs-rotate")
#+end_src

** Treemacs
#+begin_src emacs-lisp
  ;; (use-package treemacs)
  (use-package treemacs-evil)
  (use-package treemacs-magit)
#+end_src

** Fonts
*** CANCELLED Chinese Font with English Font                      :ARCHIVE:
CLOSED: [2019-12-22 Sun 18:44]
Special Fonts config for ease of zooming chinese and english fonts at same rate.

#+begin_src emacs-lisp :tangle no
  (when (display-graphic-p)
    (if (eq system-type 'darwin)
        (set-face-attribute 'default nil :font "Menlo"))

    (defvar emacs-english-font "Menlo" "The font name for English.")
    (defvar emacs-cjk-font "WenQuanYi Micro Hei Mono" "The font name for CJK.")
    (find-font (font-spec :name "WenQuanYi Micro Hei Mono"))
    (font-family-list)
    (if (eq system-type 'windows-nt)
       (setq emacs-cjk-font "WenQuanYi Micro Hey Mono"
              emacs-english-font "Menlo")
      (setq emacs-cjk-font "WenQuanYi Micro Hei Mono"))

    (defvar emacs-font-size-pair '(12 . 14) ; Old '(12 . 14)
      "Default font size pair for (english . chinese)")

    (defvar emacs-font-size-pair-list
      '((5 .  6) (9 . 10) (10 . 12) (12 . 14)
        (13 . 16) (15 . 18) (17 . 20) (19 . 22)
        (20 . 24) (21 . 26) (24 . 28) (26 . 32)
        (28 . 34) (30 . 36) (34 . 40) (36 . 44))
      "This list is used to store matching (english . chinese) font-size.")

    (defun font-exist-p (fontname)
      "Test if this font is exist or not."
      (if (or (not fontname) (string= fontname ""))
          nil
        (if (not (x-list-fonts fontname)) nil t)))

    (defun set-font (english chinese size-pair)
      "Setup emacs English and Chinese font on x window-system."

      (if (font-exist-p english)
          (set-frame-font (format "%s:pixelsize=%d" english (car size-pair)) t))

      (if (font-exist-p chinese)
          (dolist (charset '(kana han symbol cjk-misc bopomofo))
            (set-fontset-font (frame-parameter nil 'font) charset
                              (font-spec :family chinese :size (cdr size-pair))))))
    ;; Setup font size based on emacs-font-size-pair
    (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair)

    (defun emacs-step-font-size (step)
      "Increase/Decrease emacs's font size."
      (let ((scale-steps emacs-font-size-pair-list))
        (if (< step 0) (setq scale-steps (reverse scale-steps)))
        (setq emacs-font-size-pair
              (or (cadr (member emacs-font-size-pair scale-steps))
                  emacs-font-size-pair))
        (when emacs-font-size-pair
          (message "emacs font size set to %.1f" (car emacs-font-size-pair))
          (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))))

          (defun increase-emacs-font-size ()
      "Decrease emacs's font-size acording emacs-font-size-pair-list."
      (interactive) (emacs-step-font-size 1))

    (defun decrease-emacs-font-size ()
      "Increase emacs's font-size acording emacs-font-size-pair-list."
      (interactive) (emacs-step-font-size -1))

    (global-set-key (kbd "C-=") 'increase-emacs-font-size)
    (global-set-key (kbd "C--") 'decrease-emacs-font-size)
    )

  (set-face-attribute 'default nil :font emacs-english-font :height 120)
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-face-attribute charset (font-spec :family emacs-cjk-font :size (cdr emacs-font-size-pair))))

  (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair)
#+end_src

*** Set default font and configure font resizing

Credit to Harry R. Schwartz [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#set-default-font-and-configure-font-resizing][github]]

The standard =text-scale-= functions just resize the text in the current buffer; I’d generally like to resize the text in every buffer, and I usually want to change the size of the modeline, too (this is especially helpful when presenting). These functions and bindings let me resize everything all together!

Note that this overrides the default font-related keybindings from sensible-defaults.

#+begin_src emacs-lisp
  (setq pgw/default-font "Menlo")
  (setq pgw/default-font-size 12)
  (setq pgw/current-font-size pgw/default-font-size)

  (setq pgw/font-change-increment 1.1)

  (defun pgw/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat pgw/default-font "-" (number-to-string pgw/current-font-size)))

  (defun pgw/set-font-size ()
    "Set the font to `pgw/default-font' at `pgw/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (interactive)
    (let ((font-code (pgw/font-code)))
      (if (assoc 'font default-frame-alist)
          (setcdr (assoc 'font default-frame-alist) font-code)
        (add-to-list 'default-frame-alist (cons 'font font-code)))
      (set-frame-font font-code)))

  (defun pgw/reset-font-size ()
    "Change font size back to `pgw/default-font-size'."
    (interactive)
    (setq pgw/current-font-size pgw/default-font-size)
    (pgw/set-font-size))

  (defun pgw/increase-font-size ()
    "Increase current font size by a factor of `pgw/font-change-increment'."
    (interactive)
    (setq pgw/current-font-size
          (ceiling (* pgw/current-font-size pgw/font-change-increment)))
    (pgw/set-font-size))

  (defun pgw/decrease-font-size ()
    "Decrease current font size by a factor of `pgw/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq pgw/current-font-size
          (max 1
               (floor (/ pgw/current-font-size pgw/font-change-increment))))
    (pgw/set-font-size))

  (define-key global-map (kbd "C-)") 'pgw/reset-font-size)
  (define-key global-map (kbd "C-H-0") 'pgw/set-font-size)
  (define-key global-map (kbd "C-+") 'pgw/increase-font-size)
  (define-key global-map (kbd "C-=") 'pgw/increase-font-size)
  (define-key global-map (kbd "C-_") 'pgw/decrease-font-size)
  (define-key global-map (kbd "C--") 'pgw/decrease-font-size)

  (add-hook 'emacs-startup-hook
            (lambda () (interactive) (pgw/reset-font-size)))
#+end_src

*** Variable Pitch Default Font
#+begin_src emacs-lisp
  (set-face-attribute 'variable-pitch nil :family "Avenir Next")
#+end_src

*** Mixed Pitch
Mixed pitch package for mixing variable and monospace fonts where appropriate (replacing buffer-face-mode).

I copied mixed-pitch.el from [[https://gitlab.com/jabranham/mixed-pitch/][this]] repository because of [[https://gitlab.com/jabranham/mixed-pitch/issues/6][this]] issue. I will hopefully be changing it back at some point (or coming up with a better fix because the fonts don't seem to work great together) but for now this will be the fix.

#+begin_src emacs-lisp
  (use-package mixed-pitch
    :load-path "custom_load"
    :config
    ;; (set-face-attribute 'variable-pitch :height 160)
    (setq mixed-pitch-fixed-pitch-faces '(diff-added diff-context diff-file-header diff-function diff-header diff-hunk-header diff-removed font-latex-math-face font-latex-sedate-face font-latex-warning-face font-latex-sectioning-5-face font-lock-builtin-face font-lock-comment-delimiter-face font-lock-constant-face font-lock-doc-face font-lock-function-name-face font-lock-keyword-face font-lock-negation-char-face font-lock-preprocessor-face font-lock-regexp-grouping-backslash font-lock-regexp-grouping-construct font-lock-string-face font-lock-type-face font-lock-variable-name-face markdown-code-face markdown-gfm-checkbox-face markdown-inline-code-face markdown-language-info-face markdown-language-keyword-face markdown-math-face message-header-name message-header-to message-header-cc message-header-newsgroups message-header-xheader message-header-subject message-header-other mu4e-header-key-face mu4e-header-value-face mu4e-link-face mu4e-contact-face mu4e-compose-separator-face mu4e-compose-header-face org-block org-block-begin-line org-block-end-line org-document-info-keyword org-code org-latex-and-related org-checkbox org-meta-line org-table org-verbatim))
    (append-to-list 'mixed-pitch-fixed-pitch-faces '(line-number line-number-current-line org-list-dt org-link))
    ;; (add-hook 'text-mode-hook 'mixed-pitch-mode)
    (global-set-key (kbd "C-x v f") 'mixed-pitch-mode)
    )
#+end_src

** GPG

#+begin_src emacs-lisp
  ;; (require 'epa-file)
  (epa-file-enable)
  (setf epa-pinentry-mode 'loopback)
#+end_src

** Passwords
#+begin_src emacs-lisp
  (load-file "~/.passwords.el")
#+end_src

** Mode Line

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :config
    (setq rm-blacklist '(" hl-p" " WK" " yas" " Undo-Tree" " hs")
          sml/theme 'dark
          sml/name-width 30
          )
    (add-to-list 'sml/replacer-regexp-list '("^~/Google Drive/OHS/\\([0-9]\\{2\\}\\)th Grade/Classes/Semester [0-9]/\\([0-9A-Z]*\\)/" ":\\2:"))
    (add-hook 'after-init-hook 'sml/setup)
    )
#+end_src

*** Other Configuration
#+begin_src emacs-lisp
  (size-indication-mode 1)
  (line-number-mode -1)
#+end_src

*** Time display
#+begin_src emacs-lisp
  (setq display-time-format "%a %m/%d %H:%M")
  (display-time-mode)
#+end_src

*** Battery display
#+begin_src emacs-lisp
  (setq battery-mode-line-format " [%b%p%%]")
  (display-battery-mode)
#+end_src

** Helm
#+begin_src emacs-lisp
  (use-package helm
    :config
    (require 'helm-config)
    (helm-mode 1)
    (define-key global-map [remap find-file] 'helm-find-files)
    (define-key global-map [remap occur] 'helm-occur)
    (define-key global-map [remap list-buffers] 'helm-buffers-list)
    (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
    (define-key global-map [remap execute-extended-command] 'helm-M-x)
    (unless (boundp 'completion-in-region-function)
      (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
      (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))
    )
#+end_src

** Diary
*** Diary file
#+begin_src emacs-lisp
;(setq org-agenda-include-diary t)
(setq diary-file "~/Dropbox/org/diary")
#+end_src
*** Appointments Setup
#+begin_src emacs-lisp
(appt-activate 1)
(setq appt-message-warning-time 15)
(setq diary-comment-start "##")

#+end_src

** Org-mode

*** Setting orgmode directories:

#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/org")
  (setq org-default-notes-file (concat org-directory "/inbox.org"))
#+end_src

*** Startup Settings
Make org-mode files automatically indent.
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src

*** Todo keywords

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)" "DELEGATED(g)")))
#+end_src

*** Keybinds
#+begin_src emacs-lisp

(define-key global-map "\C-cc" 'org-capture)
  (global-set-key (kbd "H-c o") 
                  (lambda () (interactive) (find-file (concat org-directory "/school.org"))))
  (global-set-key (kbd "H-c p") 
                  (lambda () (interactive) (dired "~/Google Drive/OHS/11th Grade/Semester 2/")))
  (global-set-key (kbd "H-c i") 
                  (lambda () (interactive) (find-file (concat org-directory "/gtd.org"))))
  (global-set-key (kbd "H-c v") 
                  (lambda () (interactive) (find-file (concat org-directory "/violin.org"))))
  (global-set-key (kbd "H-c m") 
                  (lambda () (interactive) (find-file (concat org-directory "/notes.org"))))
  (global-set-key (kbd "H-c k") 
                  (lambda () (interactive) (find-file (concat org-directory "/links.org"))))

  ;;; Agenda key (C-c a) and other settings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)

  (evil-define-key 'normal org-mode-map "<<" 'org-promote-subtree)
  (evil-define-key 'normal org-mode-map ">>" 'org-demote-subtree)
#+end_src

*** Tags
#+begin_src emacs-lisp
  (setq org-tag-persistent-alist '(("OHS" . ?S)
				   ("noexport" . ?N)))
#+end_src

*** Log when tasks are marked as done:
#+begin_src emacs-lisp
  (setq org-log-done 'time) ; Log when task marked as done
#+end_src

*** Org Refile:
#+begin_src emacs-lisp
  (setq pgw/refile-targets (file-expand-wildcards "~/Dropbox/org/*.org"))
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)
                             (pgw/refile-targets :maxlevel . 9)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

*** Agenda

#+begin_src emacs-lisp
  ;; org-agenda-auto-exclude-function
  (defun pgw/org-my-auto-exclude-function (tag)
    (if
        (string= tag "officehours")
        (concat "-" tag)))
  (setq org-agenda-auto-exclude-function 'pgw/org-my-auto-exclude-function)

  ;(setq org-agenda-overriding-columns-format "%28ITEM %TODO %SCHEDULED %DEADLINE %TAGS")

  ;; Re-align tags when window shape changes
  (add-hook 'org-agenda-mode-hook
            (lambda () (add-hook 'window-configuration-change-hook 'org-agenda-align-tags nil t)))

  ;(add-hook 'org-agenda-finalize-hook
  ;	  'org-agenda-align-tags)

  (setq org-deadline-warning-days 7)

  (add-hook 'org-agenda-finalize-hook
            (lambda ()
              (display-line-numbers-mode -1)
              ))

  ;; Org entries
  (setq org-agenda-max-entries nil)
#+end_src

**** CANCELLED Hydra for Filtering                               :ARCHIVE:
     CLOSED: [2019-10-08 Tue 20:17]
A hydra to quickly use different filter presets.
Presents:
- School-related items
- Class
- Violin

#+begin_src emacs-lisp :tangle no
   (defhydra pgw/org-agenda-filter-presets ()
     "A hydra to make filter presets for the org-agenda"
     ("S" (progn (org-agenda-filter-remove-all) (org-agenda-filter-apply '("+OHS") 'tag)) "OHS")
     ("o" (progn (org-agenda-filter-remove-all) (org-agenda-filter-apply '("-OHS") 'tag)) "Everything but OHS")
     ("n" (org-agenda-filter-remove-all) "Remove all")
     ("q" nil "exit" :exit t)
     )

   (define-key org-agenda-mode-map (kbd "H-/") 'pgw/org-agenda-filter-presets/body)
#+end_src

**** Custom Commands
Custom commands, testing sorting strategy variable

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("q" . "Custom Agenda Views")
          ("A" "General Agenda" agenda ""
           ((org-agenda-span 1)
            (org-agenda-sorting-strategy
             '((agenda habit-down time-up deadline-up)))))
          )
        )
#+end_src

**** Files
#+begin_src emacs-lisp
  (setq org-agenda-files (append (file-expand-wildcards "~/Dropbox/org/*.org")
                                 (file-expand-wildcards "~/Dropbox/org/calendars/*.org")))
#+end_src

**** Time Grid Variable

#+begin_src emacs-lisp
  (setq org-agenda-time-grid '((daily today require-timed)
                               (600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400)
                               "......" "----------------"))
#+end_src

*** CANCELLED org-super-agenda
    CLOSED: [2019-10-08 Tue 19:00]
Testing out org-super-agenda. Code kept here in case I want to experiemnt in the future. However, for now, I've decided that tags and filtering is the best option for me.
#+begin_src emacs-lisp :tangle no
  (use-package org-super-agenda
    :config
    (org-super-agenda-mode)
    )
  (setq org-agenda-custom-commands
        '(("z" "Super zaen view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Text"
                                  :time-grid t
                                  :date today
                                  :todo "TODO"
                                  :scheduled today
                                  :deadline today
                                  :order 1)
                           (:name "School Stuff"
                                  :tag "OHS"
                                  :order 2)
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Due Today"
                                   :deadline today
                                   :order 2)
                            (:name "OHS"
                                   :tag "OHS"
                                   :order 10)
                            (:name "Due Soon"
                                   :deadline future
                                   :order 8)
                            (:name "Overdue"
                                   :deadline past
                                   :order 9)
                            (:name "Issues"
                                   :tag "Issue"
                                   :order 12)
                            (:name "Emacs"
                                   :tag "Emacs"
                                   :order 13)
                            (:name "Waiting"
                                   :todo "WAITING"
                                   :order 20)
                            (:name "trivial"
                                   :priority<= "C"
                                   :tag "someday"
                                   :order 90)
                            (:discard (:habit t)
                                      )))))))
          )
        )
#+end_src

*** Quick Capture

#+begin_src emacs-lisp
  (defun pgw/year-month ()
    "Custom function to return date in format: YYYY-MM"
    (format-time-string "%Y-%m"))

  (defun pgw/U ()
    "Custom function to return date in org inactive timestamp format"
    (format-time-string "[%Y-%m-%d %a]"))

  (defun pgw/add-12 ()
    "Custom function return active org timestamp with exactly 24 hour difference"
    (format-time-string "%Y-%m-%d %a %H:%M" (time-add (current-time) 85500)))

  (defun pgw/headline_date ()
    "Function to find the date as headline for Violin capture template"
    (goto-char (point-min))
    (let ((searchresults (search-forward (format-time-string "[%Y-%m-%d %a]") nil t)))
      (if searchresults
          'searchresults
        (error "Not found! Use Vc to create today's practice first.")
        )
      )
    )

  (setq org-capture-templates
        '(
  ("i" "Inbox" entry (file "~/Dropbox/org/inbox.org")
  "* TODO %?")
  ("n" "Quick Note" entry
   (file "~/Dropbox/org/inbox.org")
   "* %?
  %U")
  ("e" "Event" entry (file "~/Dropbox/org/events.org")
  "* %?
  %^t")
  ("L" "Link" entry (file+headline "~/Dropbox/org/links.org" "!Inbox")
  "* [[%?%:link][%:description]]
  :PROPERTIES:
  :CREATED: %U
  :END:" :prepend t)
  ("m" "Manual" entry (file "~/Dropbox/org/notes.org")
  "* %?
  :PROPERTIES:
  :CREATED: %U
  :END:" :empty-lines 1)
  ("b" "Book" entry (file+headline "~/Dropbox/org/notes.org" "Books")
   "* %^{RATING}p%^{Book Title}")
  ("j" "Journal" entry
  (file+olp+datetree "~/Dropbox/org/orgjournal.org.gpg")
  "* %^{RATING}p%?
  :PROPERTIES:
  :LOGGED: %^{Logged Time}U
  :END:
  " :kill-buffer t)
  ("S" "School")
  ("Se" "OE020B" entry
   (file+headline "~/Dropbox/org/school.org" "_OE020B_")
   "* TODO %?
  DEADLINE: <%<%Y-%m-%d %a 13:30>>")
  ("Sp" "OP005" entry
   (file+headline "~/Dropbox/org/school.org" "_OP005_")
   "* TODO %?
  DEADLINE: <%<%Y-%m-%d %a 14:45>>")
  ("Sd" "ODFRL" entry
   (file+headline "~/Dropbox/org/school.org" "_ODFRL_")
   "* TODO %?
  DEADLINE: <%<%Y-%m-%d %a 16:00>>")
  ("Sh" "OH011A" entry
   (file+headline "~/Dropbox/org/school.org" "_OH011A_")
   "* TODO %?
  DEADLINE: <%<%Y-%m-%d %a 08:30>>")
  ("Sm" "UM52B" entry
   (file+headline "~/Dropbox/org/school.org" "_UM52B_")
   "**** TODO %?
  DEADLINE: <%<%Y-%m-%d %a 13:30>>")
  ("M" "Music")
  ("MM" "Musicianship Homework" entry
   (file+headline "~/Dropbox/org/music.org" "Musicianship")
   "* TODO Musicianship Homework [/]
  DEADLINE: %^t
  - [ ] Written: %^{Written Homework}
  - [ ] Singing: %^{Singing}
  - [ ] Rhythm: %^{Rhythm}
  - [ ] Keyboard: %^{Keyboard}")
  ("Mc" "Conducting Homework" entry
   (file+headline "~/Dropbox/org/music.org" "Homework")
   "* TODO Conducting Homework
  DEADLINE: %^t
  - %?")
  ("V" "Violin")
  ("Vc" "Create Practice Entry" entry
   (file+olp "~/Dropbox/org/violin.org" "Practice Log")
   "* [%<%Y-%m-%d %a>]
  %t%?")
  ("Vd" "Add practice details" item
   (file+function "~/Dropbox/org/violin.org" pgw/headline_date)
   "%?")
  ))
#+end_src

*** MobileOrg

#+begin_src emacs-lisp
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull "~/Dropbox/Apps/MobileOrg/index.org")
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
#+end_src

*** Crypt

#+begin_src emacs-lisp
  (use-package org-crypt
    :load-path "elpa/org-9.2.3"
    :config
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))

    (setq org-crypt-key "3C44F187958295E4")
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.

    (setq auto-save-default nil)
    ;; Auto-saving does not cooperate with org-crypt.el: so you need
    ;; to turn it off if you plan to use org-crypt.el quite often.
    ;; Otherwise, you'll get an (annoying) message each time you
    ;; start Org.

    ;; To turn it off only locally, you can insert this:
    ;;
    ;; # -*- buffer-auto-save-file-name: nil; -*-
    )
#+end_src

*** Babel

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+end_src

*** Org-drill

#+begin_src emacs-lisp
  ;;; org-drill
  (use-package org-drill
    :load-path "custom_load")
#+end_src

*** Latex
#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src

**** CDLatex
#+begin_src emacs-lisp
  (use-package cdlatex
    :config
    (define-key org-cdlatex-mode-map (kbd "H-d") 'cdlatex-dollar)
    (define-key cdlatex-mode-map (kbd "H-d") 'cdlatex-dollar)
    (add-hook 'org-mode-hook
              (lambda ()
                (org-cdlatex-mode)
                ))
    )
#+end_src

**** Fragments

#+begin_src emacs-lisp
  (setq org-format-latex-options
        '(:foreground "#d6d6d4" :background default 
                      :scale 1.4
                      :html-foreground "Black" :html-background "Transparent"
                      :html-scale 1.0 
                      :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src

Fix color handling in org-preview-latex-fragment

#+begin_src emacs-lisp
  (let ((dvipng--plist (alist-get 'dvipng org-preview-latex-process-alist)))
    (plist-put dvipng--plist :use-xcolor t)
    (plist-put dvipng--plist :image-converter '("dvipng -D %D -T tight -o %O %f")))
#+end_src

#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c C-x C-l") 'org-toggle-latex-fragment)
#+end_src

*** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
      :hook (org-mode . org-bullets-mode))
#+end_src

*** Export
**** Async Init File:
#+begin_src emacs-lisp
  (setq org-export-async-init-file "~/.emacs.d/orgasyncinit.el")
#+end_src

**** Export Publishing
#+begin_src emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
        '(("pages-notes"
           :base-directory "~/Dropbox/org_publish/"
           :base-extension "org"
           :publishing-directory "~/Documents/Projects/Github/github_pages/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4             ; Just the default for this project.
           ;; :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\"/>"
           :auto-preamble t
           )
          ("pages-static"
           :base-directory "~/Dropbox/org_publish/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :publishing-directory "~/Documents/Projects/Github/github_pages/"
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("pages" :components ("pages-notes" "pages-static"))
          ))
#+end_src

*** org-noter: PDF Annotation

#+begin_src emacs-lisp
  (use-package org-noter
    :after org
    :ensure t
    :config
    (setq org-noter-default-notes-file-names '("notes.org")
          org-noter-notes-search-path '("~/Dropbox/org/notes"))
    )
#+end_src

*** TODO Diary
Use =(org-agenda-to-appt)= to add events to reminders.

*** org-gcal: Calendar Integration
Calendar Setup:
#+begin_src emacs-lisp :tangle yes
  (use-package org-gcal
    :load-path "site-lisp/org-gcal"
    :ensure t
    :demand t
    :config
    (setq org-gcal-client-id "439150530674-aab9ti8n7t80r001qmccgb2i52005f18.apps.googleusercontent.com"
          org-gcal-client-secret "5gUN_ML-yaAgdS6eg4hAZ9qo"
          org-gcal-file-alist '(("pierce.g.wang@gmail.com" .  "~/Dropbox/org/calendars/cal_gmail.org"))))
#+end_src

**** Heifetz

**** Personal

** LaTeX
#+begin_src emacs-lisp
  (setq TeX-engine 'xetex)
  (setq latex-run-command "xetex")
#+end_src

*** AUCTEX
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :config
    (setq TeX-auto-save t))
#+end_src

*** Classes - Adding Academic XeTeX Times New Roman Class

#+begin_src emacs-lisp
  (unless (with-no-warnings (find "Times" org-latex-classes :key 'car
                                  :test 'equal))
    (add-to-list 'org-latex-classes
                 '("Times"
                   "\\documentclass[12pt]{article}
  \\usepackage{fontspec}
  \\setmainfont{Times New Roman}
  \\usepackage{hyperref}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package evil
    :config
    (evil-mode t)
    (add-hook 'dired-mode-hook 'evil-emacs-state)
    (add-hook 'calendar-today-visible-hook 'evil-emacs-state)
    (add-hook 'calendar-load-hook 'evil-emacs-state)
    )
#+end_src

*** Normal Mode Keybinds
#+begin_src emacs-lisp
  ;; (define-key evil-normal-state-map (kbd "<S-return>") [?m ?` ?o escape ?` ?`])
  ;; (define-key evil-normal-state-map (kbd "<s-S-return>") [?m ?` ?O escape ?` ?`])
  (define-key evil-motion-state-map (kbd "k") 'previous-line)
  (define-key evil-motion-state-map (kbd "j") 'next-line)
  (define-key evil-insert-state-map (kbd "C-a") 'beginning-of-visual-line)
  (define-key evil-insert-state-map (kbd "C-e") 'end-of-visual-line)
#+end_src

** Programming Environments
Hide-show minor mode for collapsing functions
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src

*** Python
**** python-docstring
Smart Python Docstring Formatting
#+begin_src emacs-lisp
  (use-package python-docstring
    :load-path "site-lisp/python-docstring-mode")
#+end_src

**** Elpy
#+begin_src emacs-lisp
  (elpy-enable)
  (add-hook 'elpy-mode-hook
            'python-docstring-mode)
#+end_src

*** Octave
#+begin_src emacs-lisp
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))
  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (if (eq window-system 'x)
                  (font-lock-mode 1))))
#+end_src

** Macros
#+begin_src emacs-lisp
  (fset 'setupworkspace
     [?\C-c ?a ?A ?. ?\C-x ?0 ?\C-x ?3 ?\H-l ?\H-\C-x ?o ?\C-x ?2 ?\C-u ?7 ?\C-x ?^ ?\H-j ?\H-c ?i ?\H-h ?\H-c ?o ?\H-l])
  (global-set-key (kbd "C-x C-k 1") 'setupworkspace)

  ;;(fset 'OHSFigureSave
  ;;   [?# ?+ ?C ?A ?P ?T ?I ?O ?N ?: ?  ?\C-x ?Q return return tab ?\[ ?\[ ?f ?i ?l ?e ?: ?. ?/ ?W ?e ?e ?k ?  ?\C-x ?Q return ?/ ?\C-x ?Q return ?_ ?\C-u ?\M-! ?d ?a ?t ?e ?  ?+ ?% ?H ?% ?M ?% ?S return escape ?e ?a ?. ?p ?n ?g escape ?v ?B ?F ?/ ?l ?y escape ?A ?\] ?\] return escape ?p ?0 ?i ?\M-x ?i ?n ?s ?e ?r ?t ?d ?i ?r ?e ?c ?t ?o ?r ?y return escape ?V ?d ?i ?\C-x ?\C-f ?\C-  ?\C-a backspace ?/ ?U ?s ?e ?r ?s ?/ ?p ?i ?e ?r ?c ?e ?w ?a ?n ?g ?/ ?S ?c ?r ?e ?e ?n ?s ?h ?o ?t ?s return ?s ?\M-< ?\C-z ?/ ?S ?c ?r ?e ?e ?n ?  ?S ?h ?o ?t return ?R ?\C-  ?\C-a backspace ?\s-v backspace return ?\C-x ?k return])
  ;;(global-set-key (kbd "<f9>") 'OHSFigureSave)

  (defun pgw/disable-helm ()
    "Disable Helm"
    (interactive)
    (helm-mode 0))
  (defun pgw/enable-helm ()
    "Enable Helm"
    (interactive)
    (helm-mode))
  (global-set-key (kbd "H-x H-h d") 'pgw/disable-helm)
  (global-set-key (kbd "H-x H-h e") 'pgw/enable-helm)

  ;(fset 'importChineseFlashcards
  ;   [return ?\C-p ?* ?* ?  ?I ?t ?e ?m ?\C-c ?\C-c ?d ?r ?i ?l ?l return ?\C-n ?\C-a ?\C-z ?f ?= ?x ?x ?\C-z ?\C-k ?\C-n ?\C-a return return ?\C-p ?* ?* ?  ?A ?n ?s ?w ?e ?r ?\C-a ?* ?\C-n ?\C-a ?\C-y ?\; ?  ?\C-a ?\C-n ?\C-n])
  (fset 'convertQuizlet
     [?I ?* ?* ?\S-  ?I ?t ?e ?m ?  ?: ?d ?r ?i ?l ?l ?: return escape ?/ ?= ?= return ?x ?x ?i return return ?* ?* ?* ?  ?A ?n ?s ?w ?e ?r return escape ?\M-\}])
  (global-set-key (kbd "<f6>") 'convertQuizlet)

  (fset 'addqtest1
     [?\C-s ?a ?d ?d ?q ?\( return ?\C-a ?\C-  ?\C-\M-f ?\C-\M-f ?\C-f ?\C-\M-$ ?\C-q ?\C-j ?\[ ?  ?\] ?* return return ?\C-e ?\C-r ?a ?d ?d ?q ?\( return ?\C-x ?r ?  ?a ?\C-  ?\M-f ?\C-\M-f ?\C-f ?\C-x ?r ?  ?e ?\C-\M-$ ?\[ ?^ ?\\ ?\\ ?\] ?\\ ?\{ ?2 ?\\ ?\} ?' ?, ?  return ?\" ?, ?  return ?\C-x ?r ?j ?a ?\C-  ?\C-x ?r ?j ?e ?\C-\M-$ ?, ?  ?\[ ?\' ?\| ?\" ?\] return ?n ?i ?l ?e ?x ?i ?s ?t return ?\C-e ?\C-r ?\( return ?\C-a ?\C-s ?\( return ?\C-0 ?\C-k ?\{ return ?\" ?s ?e ?r ?v ?e ?r ?\" ?  ?: ?  ?\C-s ?n ?i ?l ?e ?x ?i ?s ?t return ?\C-u ?8 backspace ?, return ?\" ?q ?u ?e ?s ?t ?i ?o ?n ?\" ?  ?: ?  ?\" ?\C-s ?n ?i ?l ?e ?x ?i ?s ?t return ?\C-u ?8 backspace ?, return ?\" ?a ?n ?s ?w ?e ?r ?\" ?  ?: ?  ?\" ?\C-s ?n ?i ?l ?e ?x ?i ?s ?t return ?\C-u ?8 backspace ?, return ?\" ?q ?_ ?c ?o ?m ?p ?o ?n ?e ?n ?t ?s ?\" ?  ?: ?  ?\[ ?\" ?\C-e ?\C-b ?\C-r ?, return ?\] ?\C-f ?\C-  ?\C-a ?\C-\M-$ ?n ?i ?l ?e ?x ?i ?s ?t return ?, ?  ?\" return ?\C-e ?\C-r ?, ?\C-f return ?\" ?f ?a ?i ?l ?\" ?  ?: ?\C-k ?  ?T ?r ?u ?e return ?\}])
  (global-set-key (kbd "C-x C-k 2") 'addqtest1)

  (fset 'convert_time_to_clock
     [?f ?\[ ?f ?\[ ?d ?0 ?I tab ?C ?L ?O ?C ?K ?: ?  escape ?j ?d ?0 ?i backspace ?- ?- ?\C-c ?\C-c escape ?0 ?j])
  (global-set-key (kbd "C-x C-k 3") 'convert_time_to_clock)

  (fset 'getLink
     [?\C-c ?\C-l ?\C-  ?\C-a ?\M-w return return])
  (global-set-key (kbd "C-c s-l") 'getLink)

  (fset 'journal_convert
     [?\C-  ?\M-f ?\M-f ?\M-f ?\M-w ?\M-! ?e ?c ?h ?o ?  ?\" ?* ?  ?\s-v ?\" ?  ?> ?> ?  ?j ?o ?u ?r ?n ?a ?l ?. ?o ?r ?g return ?! ?p ?a ?n ?d ?o ?c ?  ?- ?f ?  ?d ?o ?c ?x ?  ?- ?t ?  ?o ?r ?g ?  ?? ?  ?> ?> ?  ?j ?o ?u ?r ?n ?a ?l ?. ?o ?r ?g return ?g ?n])
  (global-set-key (kbd "C-x C-k 4") 'journal_convert)
#+end_src

*** Macro Query
#+begin_src emacs-lisp
  (defun my-macro-query (arg)
    "Prompt for input using minibuffer during kbd macro execution.
  With prefix argument, allows you to select what prompt string to use.
  If the input is non-empty, it is inserted at point."
    (interactive "P")
    (let* ((query (lambda () (kbd-macro-query t)))
           (prompt (if arg (read-from-minibuffer "PROMPT: ") "Input: "))
           (input (unwind-protect
                      (progn
                        (add-hook 'minibuffer-setup-hook query)
                        (read-from-minibuffer prompt))
                    (remove-hook 'minibuffer-setup-hook query))))
      (unless (string= "" input) (insert input))))
  (global-set-key "\C-xQ" 'my-macro-query)
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status))
#+end_src

** yasnippet - Yet Another Snippet Extension
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
    )
#+end_src

** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/org/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src

** Daemon
#+begin_src emacs-lisp
  ;;(if 'server-process
  ;;    (server-start))
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src

** Revert Mode
For files changed by dropbox and also dired buffers.
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** Calendar
#+begin_src emacs-lisp
  (setq calendar-latitude 37.550201)
  (setq calendar-longitude -121.980827)
  (setq calendar-location-name "Fremont, CA")
  (add-hook 'calendar-mode-hook
      (lambda ()
        (evil-emacs-state)
        ))
#+end_src

*** Date Style
Set date style to ISO
#+begin_src emacs-lisp
  (calendar-set-date-style 'iso)
#+end_src

** Artist Mode
#+begin_src emacs-lisp
  (add-hook 'artist-mode-hook
            (lambda ()
              (display-line-numbers-mode -1)
              (evil-emacs-state)
              (local-set-key (kbd "<f1>") 'artist-select-op-poly-line)
              (local-set-key (kbd "<f2>") 'artist-select-op-pen-line)
              (local-set-key (kbd "<f3>") 'artist-select-op-line)
              (local-set-key (kbd "<f4>") 'artist-select-op-square)
              (local-set-key (kbd "<f5>") 'artist-select-op-ellipse))
            )
#+end_src

** Flyspell mode
Activate =flyspell-mode= automatically in all school files.
#+begin_src elisp
  (defun pgw/turn-on-flyspell-hook ()
    (cond ((string-match "^/Users/piercewang/Google Drive/OHS/" (if (eq buffer-file-name nil) "" buffer-file-name))
           (flyspell-mode 1))))

  (add-hook 'text-mode-hook 'pgw/turn-on-flyspell-hook)
#+end_src

** Games
*** Tetris
#+begin_src emacs-lisp
  (require 'tetris)
  (define-key tetris-mode-map (kbd "z") 'tetris-rotate-prev)
  (define-key tetris-mode-map (kbd "x") 'tetris-rotate-next)
#+end_src

*** Retris
#+begin_src emacs-lisp
  (use-package retris
    :load-path "site-lisp/retris")
#+end_src

** Desktop Save
#+begin_src emacs-lisp
  (desktop-save-mode 1)
  (setq desktop-restore-frames nil)
  (setq desktop-restore-eager 5)
  (setq desktop-path (list "~/emacs/desktopsave/"))
  (setq desktop-files-not-to-save "\\(^/[^/:]*:\\|(ftp)$\\|\.gpg$\\|\.org_archive\\)")
#+end_src

** ERC
#+begin_src emacs-lisp
  (setq erc-log-channels-directory "~/logs/")
  (setq erc-save-buffer-on-part t)
  (global-set-key (kbd "H-M-e") (lambda () (interactive) (erc :server "irc.freenode.net" :port 6667 :nick "tesrodome" :password passwords_ERC)))
#+end_src

** Keybinds
#+begin_src emacs-lisp
  ;;; replace-regexp
  (global-set-key (kbd "C-M-$") 'replace-regexp)

  ;;; Open .emacs.d
  (global-set-key (kbd "H-C-M-e") (lambda () (interactive) (dired "~/.emacs.d/")))

  ;;; Regular find-file
  (global-set-key (kbd "H-C-x o") (lambda () (interactive) (switch-to-buffer "*Org Agenda*")))


  ;;; Close window
  (global-set-key (kbd "s-0") 'delete-window)
#+end_src

Insert Org-mode Image
#+begin_src emacs-lisp
  (global-set-key (kbd "<f8>") 'insert-org-image)
#+end_src

*** CANCELLED which-key
CLOSED: [2020-01-15 Wed 22:36]
#+begin_src emacs-lisp :tangle no
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-popup-type 'side-window)
    (setq which-key-side-window-location 'bottom)
    )
#+end_src

*** Scrolling
#+begin_src emacs-lisp
  (global-set-key (kbd "C-v") (lambda () (interactive) (scroll-up-command 1)))
  (global-set-key (kbd "M-v") (lambda () (interactive) (scroll-down-command 1)))
#+end_src

** Resizing Windows
Hydra for resizing windows.

Functions to change:
(enlarge-window)
(shrink-window-horizontally)
(enlarge-window-horizontally)

#+begin_src emacs-lisp
  (defhydra hydra-windowmanage (global-map "H-c ^")
    "Hydra for window management."
    ("=" enlarge-window "+Vertical")
    ("-" (enlarge-window -1) "-Vertical")
    ("]" enlarge-window-horizontally "+Horizontal")
    ("[" shrink-window-horizontally "-Horizontal")
    ("q" nil "Quit"))

  (global-set-key (kbd "C-c C-6") 'hydra-windowmanage/body)
#+end_src

** User Configuration
#+begin_src emacs-lisp
  (setq user-full-name "Pierce Wang")
  (setq user-mail-address "pierce.g.wang@gmail.com")
#+end_src

** IBuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :config
    (global-set-key (kbd "C-x C-b") 'ibuffer))
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("emacs-config" (or (filename . "/.emacs.d/")
                               (filename . ".emacs.d/init.el")))
           ("OHS" (filename . "/Google Drive/OHS/"))
           ("Org" (filename . "/Dropbox/org/"))
           ("planner" (or
                      (name . "\*Calendar\*")
                      (name . "\*Org Agenda\*")
                      (name . "^diary$")))
           ("Helm" (name . "\*helm.*"))
           ("Magit" (mode . Magit))
           ("ERC" (mode . erc-mode))
           ("Help" (or (name . "\*Help\*")
                       (name . "\*info\*")
                       (name . "\*GNU Emacs\*"))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
  (define-key ibuffer-mode-map (kbd "P") nil)
#+end_src

** Dired
#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")
  (setq insert-directory-program "/usr/local/bin/gls"
        dired-use-ls-dired t)
#+end_src

Make moving files easier between two split buffers.
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

Remove print option to not accidentally print
#+begin_src emacs-lisp
  (define-key dired-mode-map (kbd "P") nil)
#+end_src

Custom dired open file function
#+begin_src emacs-lisp
  (define-key dired-mode-map (kbd "O") 'pgw/dired-open-file)
#+end_src

*** dired-quick-sort.el
#+begin_src emacs-lisp
  (use-package dired-quick-sort
    :load-path "custom_load"
    :config
    (dired-quick-sort-setup)
    )
#+end_src

*** Human readable format for ls switches (=-h=)
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

** Disabled Functions
#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+end_src

** browse-url-firefox-program
Allow the function =browse-url-firefox= to open links in firefox using bin. One could probably also accomplish this using =brew='s version of firefox, but I didn't want to install firefox again.
#+begin_src emacs-lisp
  (setq browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox-bin")
#+end_src
** OHS
*** Schoolyear Calculation
Attempt one: Loops
#+begin_src emacs-lisp :tangle no
  ;; (let ((holidays '(((9 7 2020) . "Labor Day")
  ;;                   ((9 11 2020) . "Back to School Night")
  ;;                   ((10 28 2020 10 30 2020) . "Parent-Teacher Conferences (no classes)")
  ;;                   ((11 25 2020 11 27 2020) . "Thanksgiving Holiday")
  ;;                   ((12 9 2020 12 11 2020) . "Study Days (no classes)")
  ;;                   ((12 14 2020 12 19 2020) . "Fall Semester Finals")
  ;;                   ((12 19 2020 1 3 2021) . "Winter Closure")
  ;;                   ((1 4 2021 1 8 2021) . "Reading Week")
  ;;                   ((1 18 2021) . "MLK Holiday")
  ;;                   ((2 15 2021) . "Presidents Day")
  ;;                   ((2 16 2021) . "Reading Day (No classes)")
  ;;                   ((3 22 2021 3 26 2021) . "Spring Break")
  ;;                   ((5 17 2021 5 19 2021) . "Study Days")
  ;;                   ((5 20 2021 5 21 2021) . "Spring Semester Finals")
  ;;                   ((5 24 2021 5 27 2021) . "Spring Semester Finals")
  ;;                   ((5 31 2021) . "Memorial Day Holiday")))
  ;;       (class-block '((8 19 2020 5 13 2021) . "Class Period"))
  ;;       (mon-on-fri '((1 22 2021) . "Monday on Friday (MLK Makeup)")))

    (defun pgw/ohs-schoolyear-class-block (date)
      (let ((dayname (calendar-day-of-week date))
            (holidays '(((9 7 2020) . "Labor Day")
                        ((9 11 2020) . "Back to School Night")
                        ((10 28 2020 10 30 2020) . "Parent-Teacher Conferences (no classes)")
                        ((11 25 2020 11 27 2020) . "Thanksgiving Holiday")
                        ((12 9 2020 12 11 2020) . "Study Days (no classes)")
                        ((12 14 2020 12 19 2020) . "Fall Semester Finals")
                        ((12 19 2020 1 3 2021) . "Winter Closure")
                        ((1 4 2021 1 8 2021) . "Reading Week")
                        ((1 18 2021) . "MLK Holiday")
                        ((2 15 2021) . "Presidents Day")
                        ((2 16 2021) . "Reading Day (No classes)")
                        ((3 22 2021 3 26 2021) . "Spring Break")
                        ((5 17 2021 5 19 2021) . "Study Days")
                        ((5 20 2021 5 21 2021) . "Spring Semester Finals")
                        ((5 24 2021 5 27 2021) . "Spring Semester Finals")
                        ((5 31 2021) . "Memorial Day Holiday")))
            (class-block '((8 19 2020 5 13 2021) . "Class Period"))
            (mon-on-fri '((1 22 2021) . "Monday on Friday (MLK Makeup)")))
        (when (diary-block (nth 2 (car class-block)) (nth 0 (car class-block)) (nth 1 (car class-block)) ;; Test if date is in schoolyear
                         (nth 5 (car class-block)) (nth 3 (car class-block)) (nth 4 (car class-block)))
          (let* ((counter 0)
                 (on-holiday 'nil)
                 (holiday (nth counter holidays)))
            (while (and (not on-holiday) (< counter (list-length holidays)))
              (if (equal (list-length (car holiday)) 3)
                  (when (diary-date (nth 2 (car holiday)) (nth 0 (car holiday)) (nth 1 (car holiday)))
                    (setq on-holiday 't))
                (when (diary-block (nth 2 (car holiday)) (nth 0 (car holiday)) (nth 1 (car holiday))
                                   (nth 5 (car holiday)) (nth 3 (car holiday)) (nth 4 (car holiday)))
                  (setq on-holiday 't))
                (setq counter (+ 1 counter))
                (setq holiday (nth counter holidays))))
            (if on-holiday ;; If test for holiday has returned true, then don't show on agenda
                'nil
              't))
          )
        )
      )
    )

#+end_src

Attempt two: macro to make and statements
#+begin_src emacs-lisp
  ;; (let ((holidays '(((9 7 2020) . "Labor Day")
  ;;                   ((9 11 2020) . "Back to School Night")
  ;;                   ((10 28 2020 10 30 2020) . "Parent-Teacher Conferences (no classes)")
  ;;                   ((11 25 2020 11 27 2020) . "Thanksgiving Holiday")
  ;;                   ((12 9 2020 12 11 2020) . "Study Days (no classes)")
  ;;                   ((12 14 2020 12 19 2020) . "Fall Semester Finals")
  ;;                   ((12 19 2020 1 3 2021) . "Winter Closure")
  ;;                   ((1 4 2021 1 8 2021) . "Reading Week")
  ;;                   ((1 18 2021) . "MLK Holiday")
  ;;                   ((2 15 2021) . "Presidents Day")
  ;;                   ((2 16 2021) . "Reading Day (No classes)")
  ;;                   ((3 22 2021 3 26 2021) . "Spring Break")
  ;;                   ((5 17 2021 5 19 2021) . "Study Days")
  ;;                   ((5 20 2021 5 21 2021) . "Spring Semester Finals")
  ;;                   ((5 24 2021 5 27 2021) . "Spring Semester Finals")
  ;;                   ((5 31 2021) . "Memorial Day Holiday")))
  ;;       (class-block '((8 19 2020 5 13 2021) . "Class Period"))
  ;;       (mon-on-fri '((1 22 2021) . "Monday on Friday (MLK Makeup)")))

  (defun pgw/ohs-schoolyear-class-sched (date event days time)
    (let ((dayname (calendar-day-of-week date)))
      (when (and (if (equal days 1)
                     (or (memq dayname '(1 3))
                         (diary-date 2021 1 22)) ;; Monday on Friday (MLK Makeup)
                   (memq dayname '(2 4)))
                 (diary-block 2020 8 19 2021 5 13)) ;; Class Period
        (when (not (or (diary-date 2020 9 7) ;; Labor Day
                       (diary-date 2020 9 11) ;; Back to School Night
                       (diary-block 2020 10 28 2020 10 30) ;; Parent-Teacher Conferences (no classes)
                       (diary-block 2020 11 25 2020 11 27) ;; Thanksgiving Holiday
                       (diary-block 2020 12 9 2020 12 11) ;; Study Days (no classes)
                       (diary-block 2020 12 14 2020 12 19) ;; Fall Semester Finals
                       (diary-block 2020 12 19 2021 1 3) ;; Winter Closure
                       (diary-block 2021 1 4 2021 1 8) ;; Reading Week
                       (diary-date 2021 1 18) ;; MLK Holiday
                       (diary-date 2021 2 15) ;; Presidents Day
                       (diary-date 2021 2 16) ;; Reading Day (No classes)
                       (diary-block 2021 3 22 2021 3 26) ;; Spring Break
                       (diary-block 2021 5 17 2021 5 19) ;; Study Days
                       (diary-block 2021 5 20 2021 5 21) ;; Spring Semester Finals
                       (diary-block 2021 5 24 2021 5 27) ;; Spring Semester Finals
                       (diary-date 2021 5 31))) ;; Memorial Day Holiday
          (format "%s %s" time event)))))
#+end_src
